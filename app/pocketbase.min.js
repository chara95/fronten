/*
 * PocketBase Javascript SDK (https://pocketbase.io)
 *
 * @version 0.26.0
 * @license MIT
 */
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var Common = function() {
    function Common() {
        _classCallCheck(this, Common);

        _defineProperty(this, "_baseOptions", {});
    }

    _createClass(Common, [{
        key: "_fetch",
        value: function _fetch(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return fetch(url, _extends({}, this._baseOptions, options));
        }
    }]);

    return Common;
}();
var User = function(_Common) {
    _inherits(User, _Common);

    function User() {
        _classCallCheck(this, User);

        return _possibleConstructorReturn(this, (User.__proto__ || Object.getPrototypeOf(User)).apply(this, arguments));
    }

    _createClass(User, [{
        key: "signup",
        value: function signup(email, password, passwordConfirm) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this._fetch("/users/signup", _extends({
                method: "POST",
                body: JSON.stringify({
                    email: email,
                    password: password,
                    passwordConfirm: passwordConfirm
                })
            }, options));
        }
    }, {
        key: "login",
        value: function login(email, password) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._fetch("/users/login", _extends({
                method: "POST",
                body: JSON.stringify({
                    email: email,
                    password: password
                })
            }, options));
        }
    }, {
        key: "logout",
        value: function logout() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this._fetch("/users/logout", _extends({
                method: "POST"
            }, options));
        }
    }, {
        key: "forgotPassword",
        value: function forgotPassword(email) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this._fetch("/users/forgot-password", _extends({
                method: "POST",
                body: JSON.stringify({
                    email: email
                })
            }, options));
        }
    }]);

    return User;
}(Common);
var Record = function(_Common) {
    _inherits(Record, _Common);

    function Record() {
        _classCallCheck(this, Record);

        return _possibleConstructorReturn(this, (Record.__proto__ || Object.getPrototypeOf(Record)).apply(this, arguments));
    }

    _createClass(Record, [{
        key: "getOne",
        value: function getOne(collection, id) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._fetch("/records/" + collection + "/" + id, options);
        }
    }, {
        key: "getFullList",
        value: function getFullList(collection) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this._fetch("/records/" + collection + "/full-list", options);
        }
    }, {
        key: "getList",
        value: function getList(collection) {
            var page = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var perPage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this._fetch("/records/" + collection + "/list?page=" + page + "&perPage=" + perPage, options);
        }
    }, {
        key: "create",
        value: function create(collection) {
            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._fetch("/records/" + collection, _extends({
                method: "POST",
                body: JSON.stringify(data)
            }, options));
        }
    }, {
        key: "update",
        value: function update(collection, id) {
            var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this._fetch("/records/" + collection + "/" + id, _extends({
                method: "PATCH",
                body: JSON.stringify(data)
            }, options));
        }
    }, {
        key: "delete",
        value: function _delete(collection, id) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._fetch("/records/" + collection + "/" + id, _extends({
                method: "DELETE"
            }, options));
        }
    }]);

    return Record;
}(Common);
var File = function(_Common) {
    _inherits(File, _Common);

    function File() {
        _classCallCheck(this, File);

        return _possibleConstructorReturn(this, (File.__proto__ || Object.getPrototypeOf(File)).apply(this, arguments));
    }

    _createClass(File, [{
        key: "getOne",
        value: function getOne(collection, id, filename) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this._fetch("/files/" + collection + "/" + id + "/" + filename, options);
        }
    }, {
        key: "upload",
        value: function upload(collection, file) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var form = new FormData();
            form.append("file", file);
            return this._fetch("/files/" + collection, _extends({
                method: "POST",
                body: form
            }, options));
        }
    }]);

    return File;
}(Common);
var Setting = function(_Common) {
    _inherits(Setting, _Common);

    function Setting() {
        _classCallCheck(this, Setting);

        return _possibleConstructorReturn(this, (Setting.__proto__ || Object.getPrototypeOf(Setting)).apply(this, arguments));
    }

    _createClass(Setting, [{
        key: "getOne",
        value: function getOne(key) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this._fetch("/settings/" + key, options);
        }
    }, {
        key: "update",
        value: function update(key) {
            var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._fetch("/settings/" + key, _extends({
                method: "PATCH",
                body: JSON.stringify(data)
            }, options));
        }
    }]);

    return Setting;
}(Common);
var PocketBase = function() {
    function PocketBase(url) {
        _classCallCheck(this, PocketBase);

        _defineProperty(this, "_baseURL", "");

        _defineProperty(this, "_baseOptions", {
            headers: {
                "Content-Type": "application/json"
            }
        });

        _defineProperty(this, "users", null);

        _defineProperty(this, "records", null);

        _defineProperty(this, "files", null);

        _defineProperty(this, "settings", null);

        this.users = new User();
        this.records = new Record();
        this.files = new File();
        this.settings = new Setting();
        this.setBaseUrl(url);
    }

    _createClass(PocketBase, [{
        key: "setBaseUrl",
        value: function setBaseUrl(url) {
            this._baseURL = url;
            this.users._baseOptions = _extends({}, this._baseOptions, {
                baseURL: url
            });
            this.records._baseOptions = _extends({}, this._baseOptions, {
                baseURL: url
            });
            this.files._baseOptions = _extends({}, this._baseOptions, {
                baseURL: url
            });
            this.settings._baseOptions = _extends({}, this._baseOptions, {
                baseURL: url
            });
        }
    }, {
        key: "collection",
        value: function collection(name) {
            var _this = this;

            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return {
                getOne: function getOne(id) {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    return _this.records.getOne(name, id, _extends({}, opts, options));
                },
                getFullList: function getFullList() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    return _this.records.getFullList(name, _extends({}, opts, options));
                },
                getList: function getList() {
                    var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                    var perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
                    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    return _this.records.getList(name, page, perPage, _extends({}, opts, options));
                },
                create: function create() {
                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    return _this.records.create(name, data, _extends({}, opts, options));
                },
                update: function update(id) {
                    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    return _this.records.update(name, id, data, _extends({}, opts, options));
                },
                delete: function _delete(id) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    return _this.records.delete(name, id, _extends({}, opts, options));
                },
                getOneFile: function getOneFile(id, filename) {
                    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                    return _this.files.getOne(name, id, filename, _extends({}, opts, options));
                },
                uploadFile: function uploadFile(file) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    return _this.files.upload(name, file, _extends({}, opts, options));
                }
            };
        }
    }]);

    return PocketBase;
}();